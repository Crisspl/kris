$bindings
$$t0
rmap=3
view=2D
aspect=COLOR
mipoffset=0
mipcount=FULL
layeroffset=0
layercount=FULL
layout=RO_OPTIMAL

$vertex
//#pragma wave shader_stage(vertex)
struct SBasicViewParameters //! matches CPU version size & alignment (160, 4)
{
	float4x4 MVP;
	float3x4 MV;
	float3x3 normalMat;
};

#if 1
// set 1, binding 0
[[vk::binding(0, 1)]]
cbuffer CameraData
{
    SBasicViewParameters params;
};
#endif

struct VSInput
{
	[[vk::location(0)]] float3 position : POSITION;
	[[vk::location(1)]] float4 color : COLOR;
	[[vk::location(2)]] float2 uv : TEXCOORD;
	[[vk::location(3)]] float3 normal : NORMAL;
};

struct PSInput
{
	float4 position : SV_Position;
	float4 color : COLOR0;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD;
};

PSInput main(VSInput input)
{
    PSInput output;
#if 1
    output.position = mul(params.MVP, float4(input.position, 1.0));
#else
	output.position = float4(input.position, 1.0f);
#endif
    output.color = input.color;
	output.normal = input.normal;
	output.uv = input.uv;
    
    return output;
}

$pixel
//#pragma wave shader_stage(fragment)

struct PSInput
{
	float4 position : SV_Position;
	float4 color : COLOR0;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD;
};

// Register for mySampler is autoassigned in DX;
[[vk::combinedImageSampler]][[vk::binding(8,3)]]
Texture2D<float4> myTexture;
[[vk::combinedImageSampler]][[vk::binding(8,3)]]
SamplerState mySampler;

float4 main(PSInput input) : SV_TARGET
{
	//float3 n = normalize(input.normal);
	//float3 l = normalize(float3(1,1,1));
	return myTexture.Sample(mySampler, input.uv);
	//return input.color;// * saturate(dot(n,l));
}